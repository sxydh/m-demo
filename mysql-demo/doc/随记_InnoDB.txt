概述
    https://dev.mysql.com/doc/refman/8.4/en/innodb-storage-engine.html
    存储引擎
开始
    索引（ https://dev.mysql.com/doc/refman/8.4/en/innodb-indexes.html ）
        概述
            索引用于提升查询效率
        类型
            聚簇索引
                概述
                    聚簇索引默认是主键索引，如果没有显示定义主键索引或唯一索引，则 MySQL 会自动创建一列（值是 Row ID ）作为聚簇索引。
                    B+ 树实现，叶子节点包含关键字和数据，非叶子节点仅包含关键字。
            第二索引
                概述
                    聚簇索引之外的索引
                    B+ 树实现，叶子节点包含关键字和聚簇索引值，非叶子节点仅包含关键字。
                类型
                    普通索引
                    唯一索引
                    组合索引
                        概述
                            多个字段构成的索引
                        命中规则
                            概述
                                总体原则：最左匹配。
                            开始
                                前置条件
                                    table
                                        t_order
                                            index
                                                order_date, user_id
                                命中
                                    explain select * from t_order where order_date = '2024-08-11 17:52:46' and user_id = '102930247824474219';
                                未命中
                                    explain select * from t_order where order_date = '2024-08-11 17:52:46' or user_id = '102930247824474219';
                    全文索引
    锁（ https://dev.mysql.com/doc/refman/8.4/en/innodb-locking.html ）
        前置条件
            事务隔离级别：可重复读。
        概述
            锁用于在并发环境下保证数据的一致性
        类型
            表级锁
                锁模式
                    Intention Shared Lock
                        概述
                            意向共享锁
                            加行级锁 Shared Lock 的同时会加表级锁 Intention Shared Lock
                        开始
                            select * from t_order for share;
                                会加行级锁 Shared Lock 和表级锁 Intention Shared Lock
                                
                    Intention Exclusive Lock
                        概述
                            意向排它锁
                            加行级锁 Exclusive Lock 的同时会加表级锁 Intention Exclusive Lock
                        开始
                            select * from t_order for update;
                                会加行级锁 Exclusive Lock 和表级锁 Intention Exclusive Lock
                    
                    Shared Lock
                        概述
                            共享锁
                        开始
                            lock tables t_order read;
                    Exclusive Lock
                        概述
                            排它锁
                        开始
                            lock tables t_order write;
                    
                    AUTO-INC Lock
                        概述
                            自增主键锁
            行级锁
                锁模式
                    Record Lock
                        概述
                            记录锁，可以是共享 S 的，也可以是互斥 X 的。
                            Record Lock 基于索引，在行上加 Record Lock 。
                            假设索引 idx 存在值 1 ， 3 ， 4 ，语句命中索引 idx 且条件值是 3 ，则最终会在 3 上加 Record Lock 。
                            注意：
                                如果没有命中索引（不是没有命中值），会在所有行上加 Next-Key Lock ，等效相当于锁表。
                                    如果加的是互斥的 Next-Key Lock ，则其它事务的增删改都会被阻塞。
                        开始
                            select * from t_order where order_id = '1' for update;
                                order_id 必须命中索引，而且存在条件值 1 ，才会加 X 型的 Record Lock 。
                    Gap Lock
                        概述
                            间隙锁，可以是共享 S 的，也可以是互斥 X 的。
                            Gap Lock 基于索引，在开区间上加锁。
                            假设索引 idx 存在值 1 ， 3 ， 4 ，语句命中索引且条件值是 2 ，则最终会在开区间 (1, 3) 上加 Gap Lock 。
                        开始
                            select * from t_order where order_id = '2' for update;
                                order_id 必须命中索引，而且不存在条件值 2 ，才会加 X 型的 Gap Lock 。
                    Next-Key Lock
                        概述
                            临键锁，可以是共享 S 的，也可以是互斥 X 的。
                            Next-Key Lock 基于索引，在左开右闭区间上加锁。
                            假设索引 idx 存在值 1 ， 3 ， 4 ，语句命中索引且条件值是 >= 2 ，则最终会在区间 (2, 3] 和 (3, +infi] 上加 Next-Key Lock 。
                        开始
                            select * from t_order where order_id >= '2' for update;
                                order_id 必须命中索引，而且区间条件包含已存在的记录，才会加 X 型的 Next-Key Lock 。
                    Insert Intention Lock
                        概述
                            插入意向锁
        兼容性
            前置条件
                table
                    t_order
                        index
                            order_id
                                1
                                3
                                4
            概述
                总体原则：读读兼容，读写互斥，写写互斥。
                后续示例未列出 Record Lock 、 Gap Lock 、 Next-Key Lock ，但其兼容性遵循总体原则。 
                注意：意向锁之间兼容。
            兼容
                表级锁
                    IS
                        select * from t_order where order_id = '0' for share;
                            IS
                                select * from t_order where order_id = '5' for share;
                            IX
                                select * from t_order where order_id = '5' for update;
                            S
                                lock tables t_order read;
                    IX
                        select * from t_order where order_id = '0' for update;
                            IS
                                select * from t_order where order_id = '5' for share;
                            IX
                                select * from t_order where order_id = '5' for update;
                    S
                        lock tables t_order read;
                            IS
                                select * from t_order where order_id = '5' for share;
                            S
                                lock tables t_order read;
            互斥
                表级锁
                    IS
                        select * from t_order where order_id = '0' for share;
                            X
                                lock tables t_order write;
                    IX
                        select * from t_order where order_id = '0' for update;
                            S
                                lock tables t_order read;
                            X
                                lock tables t_order write;
                    S
                        lock tables t_order read;
                            IX
                                select * from t_order where order_id = '5' for update;
                            X
                                lock tables t_order write;
                    X
                        lock tables t_order write;
                            IS
                                select * from t_order where order_id = '5' for share;
                            IX
                                select * from t_order where order_id = '5' for update;
                            S
                                lock tables t_order read;
                            X
                                lock tables t_order write;
            验证
                select distinct object_name, index_name, lock_type, lock_mode, lock_status, lock_data from performance_schema.data_locks;