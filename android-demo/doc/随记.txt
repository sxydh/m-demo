基础
    核心组件
        Activity
            概述
                Activity 通常代表应用中的一个屏幕，用户可以在这个屏幕上进行交互。
                Activity 是一个类，负责管理用户界面、处理用户的输入和操作。
            生命周期
                onCreate()
                    Activity 首次创建时调用
                    一般在这里处理初始化任务
                onStart()
                onPause()
                    Activity 失去焦点时触发，此时 Activity 仍然部分可见，只是未处于栈顶。
                onResume()
                    Activity 获得焦点时触发，此时 Activity 处于栈顶。
                onStop()
                    Activity 不可见时触发
                onRestart()
                    Activity 从 onStop() 恢复到可见时触发
                onDestroy()
                    Activity 被用户或系统关闭时触发
            实例管理
                Activity 栈（Activity Stack）是 Android 系统用于管理 Activity 的一种数据结构，按照 LIFO 的原则维护 Activity 的顺序。
                在 Activity 栈中，用户看到的是位于栈顶的 Activity。
            启动方式
                显示启动
                    指定目标 Activity 全限定名
                隐式启动
                    通过规则匹配目标 Activity
                    通过协议跳转目标 Activity
            启动模式
                standard
                    无条件新建实例
                singleTop
                    Activity 栈顶不是目标 Activity 则新建实例
                singleTask
                    Activity 栈内目标 Activity 是单例（针对一个应用）
                singleInstance
                    Activity 栈内目标 Activity 是单例（针对所有应用）
            停止方式
                finish()
                throw new Exception()
            重要回调
                onSaveInstanceState()
                    Activity 销毁之前触发
                    一般用来保存销毁前的实例状态
        Service
            概述
                Service 通常用于在后台运行任务，不需要与用户交互。
                Service 在主线程中运行，应当避免执行耗时操作。
            生命周期
                startService 方式启动
                    onCreate()
                    onStartCommand()
                        启动 Service 时调用，多次启动会触发多次调用。
                        不同的返回值含义
                            START_STICKY
                                服务被杀死后将尝试重新创建，并且不会重新传递最后一个 Intent。
                                适用于处理不断运行的服务，例如后台音乐播放器。
                            START_NOT_STICKY
                                服务被杀死后不会重新创建
                                适用于执行一次性任务的服务，如下载任务完成后即可停止服务。
                            START_REDELIVER_INTENT
                                服务被杀死后将尝试重新创建，并且会重新传递最后一个 Intent。
                                适用于需要确保所有启动请求都被处理的服务，例如下载文件的服务。
                    onDestroy()
                bindService 方式启动
                    onCreate()
                    onBind()
                    onUnBind()
                    onDestroy
            启动方式
                startService
                    无法获取启动后的 Service 实例
                    即使应用停止后 Service 仍然可以继续运行
                    停止方式
                        this.stopService()
                        this.stopSelf()
                bindService
                    可以获取启动后的 Service 实例
                    当解除所有绑定后 Service 会被销毁
                    停止方式
                        <caller>.unbindService()
            如何保活
                将 Service 设置为前台服务
        ContentProvider
            概述
                ContentProvider 用于提供数据的访问和管理，允许应用程序之间共享数据。
                ContentProvider 提供了一种标准化的接口，允许应用程序通过 URI（Uniform Resource Identifier）来访问和操作数据，而不需要了解底层数据存储的细节。
                ContentProvider 是应用之间共享数据的方式之一，如果想要轻量化，可以选择 SharedPreferences。
        Broadcast
            概述
                Broadcast（广播）是一种用于在应用组或件之间传递消息的机制
                Broadcast 允许一个组件发送事件，而其他组件可以注册接收这些事件并作出响应。
            广播方式
                显示广播
                    显示指定接收者
                隐式广播
                    根据规则匹配接收者
            注册方式
                静态注册
                动态注册
    进程管理
        进程创建
        进程分类
        进程通信
环境
    Android Studio
        SDK
            配置 
                Settings
                    Languages & Frameworks
                        Android SDK
            ADB
                前置条件
                    Windows 11
                配置系统环境变量 path
                    追加
                        <Android SDK Location>\platform-tools
                设备列表
                    adb devices
                进入设备
                    adb -s <device_id> shell