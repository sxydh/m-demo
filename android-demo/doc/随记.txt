基础
    核心组件
        Activity
            概述
                Activity 通常代表应用中的一个屏幕，用户可以在这个屏幕上进行交互。
                Activity 是一个类，负责管理用户界面、处理用户的输入和操作。
            生命周期
                onCreate()
                    Activity 首次创建时调用
                    一般在这里处理初始化任务
                onStart()
                onPause()
                    Activity 失去焦点时触发，此时 Activity 仍然部分可见，只是未处于栈顶。
                onResume()
                    Activity 获得焦点时触发，此时 Activity 处于栈顶。
                onStop()
                    Activity 不可见时触发
                onRestart()
                    Activity 从 onStop() 恢复到可见时触发
                onDestroy()
                    Activity 被用户或系统关闭时触发
            实例管理
                Activity 栈（Activity Stack）是 Android 系统用于管理 Activity 的一种数据结构，按照 LIFO 的原则维护 Activity 的顺序。
                在 Activity 栈中，用户看到的是位于栈顶的 Activity。
            启动方式
                显示启动
                    指定目标 Activity 全限定名
                隐式启动
                    通过规则匹配目标 Activity
                    通过协议跳转目标 Activity
            启动模式
                standard
                    无条件新建实例
                singleTop
                    Activity 栈顶不是目标 Activity 则新建实例
                singleTask
                    Activity 栈内目标 Activity 是单例（针对一个应用）
                singleInstance
                    Activity 栈内目标 Activity 是单例（针对所有应用）
            停止方式
                finish()
                throw new Exception()
            重要回调
                onSaveInstanceState()
                    Activity 销毁之前触发
                    一般用来保存销毁前的实例状态
        Service
            概述
                Service 通常用于在后台运行任务，不需要与用户交互。
                Service 在主线程中运行，应当避免执行耗时操作。
            生命周期
                startService 方式启动
                    onCreate()
                    onStartCommand()
                        启动 Service 时调用，多次启动会触发多次调用。
                        不同的返回值含义
                            START_STICKY
                                服务被杀死后将尝试重新创建，并且不会重新传递最后一个 Intent。
                                适用于处理不断运行的服务，例如后台音乐播放器。
                            START_NOT_STICKY
                                服务被杀死后不会重新创建
                                适用于执行一次性任务的服务，如下载任务完成后即可停止服务。
                            START_REDELIVER_INTENT
                                服务被杀死后将尝试重新创建，并且会重新传递最后一个 Intent。
                                适用于需要确保所有启动请求都被处理的服务，例如下载文件的服务。
                    onDestroy()
                bindService 方式启动
                    onCreate()
                    onBind()
                    onUnBind()
                    onDestroy
            启动方式
                startService
                    无法获取启动后的 Service 实例
                    即使应用停止后 Service 仍然可以继续运行
                    停止方式
                        this.stopService()
                        this.stopSelf()
                bindService
                    可以获取启动后的 Service 实例
                    当解除所有绑定后 Service 会被销毁
                    停止方式
                        <caller>.unbindService()
            如何保活
                将 Service 设置为前台服务
        ContentProvider
            概述
                ContentProvider 用于提供数据的访问和管理，允许应用程序之间共享数据。
                ContentProvider 提供了一种标准化的接口，允许应用程序通过 URI（Uniform Resource Identifier）来访问和操作数据，而不需要了解底层数据存储的细节。
                ContentProvider 是应用之间共享数据的方式之一，如果想要轻量化，可以选择 SharedPreferences。
        Broadcast
            概述
                Broadcast（广播）是一种用于在应用组或件之间传递消息的机制
                Broadcast 允许一个组件发送事件，而其他组件可以注册接收这些事件并作出响应。
            广播方式
                显示广播
                    显示指定接收者
                隐式广播
                    根据规则匹配接收者
            注册方式
                静态注册
                动态注册
    View
        概述
            View 是用户界面的可见元素的基类，提供测量、布局、绘制、事件处理等功能。
        绘制流程
            重要的类（接口）和它们之间的关系
                PhoneWindow
                    PhoneWindow 是 Window 接口的一个实现
                    一般情况下一个 Activity 对应一个 PhoneWindow
                DecorView
                    DecorView 是 Window 的根视图，包含 Window 要显示的内容。
                        以 PhoneWindow 为例，它的 DecorView 可以通过 Activity 的 setContentView() 进行设置。
                    DecorView 本质是 FrameLayout
                ViewRootImpl
                    ViewRootImpl 持有 Window 的根视图 DecorView ，负责视图树的绘制、用户事件分发等。
                    一般情况下一个 Window 对应一个 ViewRootImpl
                WindowManager
                    WindowManager 负责管理一个或多个 Window 的位置、大小、显示等。
                WindowManagerService
                    WindowManagerService 是系统级的 Service ， WindowManager 对 Window 的操作实际上由 WindowManagerService 执行。
                逻辑层次关系
                    Activity
                        PhoneWindow
                            DecorView
                                TitleView
                                ContentView
                                    ViewGroup
                                        View
                                        ViewGroup
                                        ...
                        Dialog
                        ...
            ViewRootImpl.performMeasure()
                执行视图树的测量操作，确定绘制空间的大小，会触发视图树节点的 onMeasure() 方法。
            ViewRootImpl.performLayout()
                执行视图树的布局操作，确定每个视图的大小、位置，会触发视图树节点的 onLayout() 方法。
            ViewRootImpl.performDraw()
                执行视图树的绘制操作，对每个视图进行绘制，会触发视图树节点的 onDraw() 方法。
        ViewGroup
            概述
                在视图树中， ViewGroup 是 View 的父节点。
                ViewGroup 继承自 View ，且实现了 ViewParent 接口，每个 View 都持有一个 ViewParent ，以此形成视图树。
    进程管理
        进程创建
            应用启动后，系统自动创建一个进程来运行程序组件。
            用户可以通过在 AndroidManifest.xml 中配置 android:process，显示指定组件运行时的进程。
        进程分类
            前台进程
                进程中包含正在与用户交互的组件，获取资源的优先级最高。
            可见进程
                进程中包含用户可见的组件，获取资源的优先级比前台进程低。
            服务进程
                进程中包含服务组件，获取资源的优先级比可见进程低。
            后台进程
                进程中包含用户不可见的组件，获取资源的优先级比服务进程低。
            空进程
                进程中包含的组件处于未活动状态，获取资源的优先级最低。
        进程通信
            Binder （ https://zhuanlan.zhihu.com/p/35519585 ）
            AIDL （基于 Binder 实现）
            Messenger （基于 AIDL 实现）
            ContentProvider （基于 Binder 实现）
            文件共享
            Socket
        进程销毁
            应用结束后，进程销毁和资源回收由系统处理。
            若当前资源充足，即使进程中的组件处于未活动状态，进程也不会被立即销毁和回收资源，这有助于应用的下一次快速启动。
            若当前资源不足，系统会销毁优先级低的进程并回收资源。
环境
    Android Studio
        File
            Settings
                Languages & Frameworks
                    Android SDK
                        C:\Users\Administrator\AppData\Local\Android\Sdk
                        
                            C:\Users\Administrator\AppData\Local\Android\Sdk\system-images\android-32\google_apis_playstore\x86_64
                                镜像下载路径