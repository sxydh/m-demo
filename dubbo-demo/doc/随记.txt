概述
    https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/quick-start/api/
    https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/code-architecture/
快速开始
    服务注册
        DubboBootstrap.start()
            DefaultModuleDeployer.registerServices()
                ServiceConfig.register(...)
                    RegistryProtocol.register(...)
                        NacosRegistry.doRegister(...)
                            NacosNamingServiceWrapper.registerInstance(serviceName, ...)
                                服务 serviceName 格式：
                                    providers:cn.net.bhe.api.HelloService::
    服务暴露
        DubboBootstrap.start()
            DefaultModuleDeployer.exportServices()
                Transporters.bind(...)
                    服务端口默认是 20880
                    服务端口监听：
                        NettyServer.doOpen()
                            bossGroup = createBossGroup();
                            workerGroup = createWorkerGroup();
    服务发现
        DubboBootstrap.start()
            服务事件订阅：
                RegistryService.subscribe(...)
                    FailbackRegistry.subscribe(...)
                        NacosRegistry.doSubscribe(url, ...)
                            NacosNamingService.subscribe(serviceName, ...)
                                InstancesChangeNotifier.registerListener(groupName, serviceName, ...)
                                    服务 serviceName 格式：
                                        providers:cn.net.bhe.api.HelloService::
                                    服务事件响应：
                                        InstancesChangeNotifier.onEvent(...)
                                            AbstractDirectory.refreshRouter(...)
                                                AbstractDirectory.refreshInvokerInternal()
                                                    更新服务列表缓存
    服务调用
        调用实现
            Consumer
                HelloService.hello()
                    InvokerInvocationHandler.invoke(...)
                        过滤器链执行（集群相关）：
                            FilterChainBuilder.CopyOfFilterChainNode.invoke(...)
                                根据容错实现尝试调用目标服务实例集群：
                                    AbstractClusterInvoker.doInvoke(...)
                                        默认是 failover 失败则切换并重试实现：
                                            FailoverClusterInvoker.doInvoke(...)
                                                根据负载均衡实现得到目标服务实例：
                                                    AbstractClusterInvoker.select(...)
                                                        LoadBalance.select(...)
                                                            默认是 RandomLoadBalance 随机实现
                                                过滤器链执行（实例相关）：
                                                    FilterChainBuilder.CopyOfFilterChainNode.invoke(...)
                                                        通过 Netty 调用目标服务：
                                                            AbstractClient.send(...)
                                                                NioSocketChannel.writeAndFlush(...)
                                                                    过滤器链执行（响应回调）：
                                                                        AsyncRpcResult.whenCompleteWithContext(...)
            Provider
                NettyServerHandler.channelRead(...)
                    AllChannelHandler.received(...)
                        线程池任务执行：
                            executor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));
                                过滤器链执行（前置拦截）：
                                    FilterChainBuilder.CopyOfFilterChainNode.invoke(...)
                                        最终接口调用：
                                            Wrapper.invokeMethod(...)
                                                HelloServiceImpl.hello()
                                                    过滤器链执行（响应回调）：
                                                        AsyncRpcResult.whenCompleteWithContext(...)
        调用容错
            概述
                https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/service/fault-tolerent-strategy/
            策略
                failover
                    默认实现
                    失败则切换并重试：
                        FailoverClusterInvoker.doInvoke(...)
                failfast
                    失败则报错：
                        FailfastClusterInvoker.doInvoke(...)
                failsafe
                    失败则忽略：
                        FailsafeClusterInvoker.doInvoke(...)
        调用降级
            概述
                https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/service/service-downgrade/
            方案
                Sentinel
    扩展实现
        SPI
            https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/overview/
                概述
                    Dubbo 在约定文件夹内读取约定的配置文件，并加载文件中定义的类。
                        约定文件夹：
                            META-INF/dubbo
                        约定配置文件：
                            org.apache.dubbo.rpc.ExporterListener
                            org.apache.dubbo.rpc.Filter
                            org.apache.dubbo.rpc.cluster.filter.ClusterFilter
                            org.apache.dubbo.remoting.Transporter
                            org.apache.dubbo.remoting.telnet.TelnetHandler
                            org.apache.dubbo.common.serialize.Serialization
                            org.apache.dubbo.remoting.Codec2
                            org.apache.dubbo.common.status.StatusChecker
                        类加载：
                            ConfigValidationUtils.checkMultiExtension(..., types, ...)
                扩展案例
                    过滤器
                        概述
                            通过 SPI 实现
                        构建
                            DefaultFilterChainBuilder.buildInvokerChain(...)
                        传参
                            通过 com.alibaba.dubbo.rpc.RpcInvocation.attachments 实现
                        排序
                            通过 default,filter1,filter2 指定顺序
                                default 表示内置过滤器
核心组件
    URL
        URL 是配置信息的封装格式
    Invoker
        Invoker 是实体域，代表一个可执行体，有可能是一个集群实现，也可能是一个本地实现，也可能是一个远程实现。
    Invocation
        Invocation 是会话域，持有调用过程中的信息，比如方法名、参数等。
    Protocol
        Protocol 是服务域，是 Invoker 暴露和引用的入口。
整体设计
    概述
        可分为十层
        层与层之间单向依赖
        除了 Service 和 Config 层为 API 实现，其它各层均为 SPI 实现。
    分层
        Service
            定义 RPC 服务接口
        Config
            定义各层需要的配置信息，以 ServiceConfig 和 ReferenceConfig 为中心。
        Proxy
            创建代理
        Registry
            注册服务
            发现服务
        Cluster
            均衡负载
        Monitor
            监控 RPC 性能
        Protocol
            封装 RPC 调用
        Exchange
            封装请求和响应
        Transport
            封装网络传输
        Serialize
            封装序列化
常见问题
    超时时间
        默认 1 秒
        过滤器实现：
            ProfilerServerFilter.onResponse(...)
                ProfilerServerFilter.dumpIfNeed(...)
    重试次数
        默认失败（包括不可用、超时等）后额外重试 2 次
        容错策略 failover 实现：
            FailoverClusterInvoker.doInvoke(...)
    限流降级
        第三方组件实现：
            Sentinel
    传输协议
        默认 TCP 协议
        基于 Netty 实现的长连接
    设计模式
        创建型模式
            工厂模式
                ProxyFactory
                RegistryFactory
        行为型模式
            观察者模式
                EventListener
            策略模式
                SPI
        结构型模式
            代理模式
                Proxy
            装饰器模式
                ProtocolFilterWrapper