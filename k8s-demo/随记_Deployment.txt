概述
    Deployment 用于管理 Pod 的生命周期，而且支持 Pod 的扩展、更新、回滚等。
命令
    列表
        kubectl get deployment -o wide -n <namespace_name>
    扩缩
        kubectl scale deployment/<deployment_name> --replicas=<target_number>
环境
    创建 Deployment
        基于 MySQL
            mkdir -p /opt/module/tmp
            cd /opt/module/tmp
            vim deployment_mysql_demo.yaml
                追加
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: deployment-mysql-demo
                      labels:
                        app: deployment-mysql-demo
                    spec:
                      replicas: 1
                      selector:
                        matchLabels:
                          app: pod-mysql-demo
                      template:
                        metadata:
                          labels:
                            app: pod-mysql-demo
                        spec:
                          containers:
                          - name: container-mysql-demo
                            image: mysql
                            ports:
                            - containerPort: 3306
                            env:
                            - name: MYSQL_ROOT_PASSWORD
                              value: "123"
                            volumeMounts:
                            - name: mysql-volume
                              mountPath: /var/lib/mysql
                          volumes:
                          - name: mysql-volume
                            emptyDir: {}
            kubectl create -f deployment_mysql_demo.yaml -n default
            kubectl get pod -n wide -n default
            POD_NAME=$(kubectl get pod -n default | grep mysql-demo | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n default
            POD_NAME=$(kubectl get pod -n default | grep mysql-demo | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n default
            POD_NAME=$(kubectl get pod -n default | grep mysql-demo | awk 'NR==1 {print $1}') && kubectl exec -it $POD_NAME -n default -- bash
            POD_NAME=$(kubectl get pod -n default | grep mysql-demo | awk 'NR==1 {print $1}') && kubectl port-forward pod/$POD_NAME -n default 3306:3306 --address=192.168.233.129
            kubectl delete -f deployment_mysql_demo.yaml -n default
    
        基于 Nginx
            mkdir -p /opt/module/tmp
            cd /opt/module/tmp
            vim deployment_nginx_demo.yaml
                追加
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: deployment-nginx-demo
                      labels:
                        app: deployment-nginx-demo
                    spec:
                      replicas: 1
                      selector:
                        matchLabels:
                          app: pod-nginx-demo
                      template:
                        metadata:
                          labels:
                            app: pod-nginx-demo
                        spec:
                          containers:
                          - name: container-nginx-demo
                            image: nginx
                            ports:
                            - containerPort: 80
            kubectl create -f deployment_nginx_demo.yaml -n default
            kubectl get pod -n wide -n default
            POD_NAME=$(kubectl get pod -n default | grep nginx-demo | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n default
            POD_NAME=$(kubectl get pod -n default | grep nginx-demo | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n default
            kubectl delete -f deployment_nginx_demo.yaml -n default
            
        基于 Tomcat
            mkdir -p /opt/module/tmp
            cd /opt/module/tmp
            vim deployment_tomcat_demo.yaml
                追加
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: deployment-tomcat-demo
                      labels:
                        app: deployment-tomcat-demo
                    spec:
                      replicas: 1
                      selector:
                        matchLabels:
                          app: pod-tomcat-demo
                      template:
                        metadata:
                          labels:
                            app: pod-tomcat-demo
                        spec:
                          containers:
                          - name: container-tomcat-demo
                            image: tomcat
                            ports:
                            - containerPort: 8080
            kubectl create -f deployment_tomcat_demo.yaml -n default
            kubectl get pod -n wide -n default
            POD_NAME=$(kubectl get pod -n default | grep tomcat-demo | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n default
            POD_NAME=$(kubectl get pod -n default | grep tomcat-demo | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n default
            kubectl delete -f deployment_tomcat_demo.yaml -n default