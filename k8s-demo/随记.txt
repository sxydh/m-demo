概述
    K8s (Kubernetes) 是用于部署、扩展、管理容器的开源系统。
核心概念
    Pod
        Pod 是一组容器的抽象
        Pod 内的不同容器可以通过 localhost 互相访问
    Service
        Servie 是一组 Pod 的抽象
    Namespace
        Namespace 是一组资源的抽象，提供了一个逻辑隔离的空间。
核心组件
    Kubernetes Master
        API Server
            API Server 向外部客户端暴露 K8s 的 API ，外部客户端可以通过这些 API 来发出请求以处理自己的工作。
        Scheduler
            Scheduler 根据集群 Node 的资源信息，将 Pod 调度到合适的 Node 上运行。
        Controller Manager
            Replication Controller
                Replication Controller 用于确保 Pod 的副本数量与期望数量一致，并监控 Pod 的健康状态。
            Node Controller
                Node Controller 用于确保集群中 Node 数量与期望数量一致，并监控 Node 的健康状态。
            ...
        Etcd
            Etcd 是 K8s 集群的后台数据库，内部实现是键值存储，类似 Redis 。
            Etcd 存储的数据包括集群配置、节点状态信息、服务信息、 Pod 信息、事件信息等。
    Kubernetes Node
        Kubelet
            Kubelet 负责与 API Server 通信、容器生命周期管理（通过 Container Runtime 实现）、资源信息（例如计算、内存、存储、网络资源）上报等。
        Kube-proxy
            Kube-proxy 可以实现流量负载均衡的功能，将到达 Service 的流量分配到合适的 Pod 。
                对 Service 的访问可以使用 NodePort 方式
                    NodePort 是将每个节点指定端口的流量，映射到指定的 Service 。
            Kube-proxy 提供的负载均衡主要有两种场景：
                节点外客户端访问 Service
                节点内 Pod 访问 Service
        Container Runtime
            Container Runtime （容器运行时）主要用于容器生命周期的管理，包含容器创建、启动、运行、停止、销毁等，容器运行时的具体实现有 Containerd 、 CRI-O 等。
功能组件
    网络
        Ingress
            Ingress 可以实现流量路由、负载均衡的功能，将到达 Ingress 的流量分配到合适的 Service 。
            Ingress 的功能类似于 Nginx ，先收到外部客户端的请求（一般带有域名），然后根据用户定义的规则，映射到正确的 Service 。
            
        Flannel
        Calico

        相关知识
            OSI
                7 Application layer
                6 Presentation layer
                5 Session layer
                4 Transport layer
                    UDP
                    TCP
                3 Network layer
                    IP
                2 Data link layer
                    Ethernet
                    VLAN
                1 Physical layer
            NAT
            Underlay
            Overlay
            LAN
                LAN （ Local Area Network ，局域网）是指覆盖范围较小的网络
            VLAN
                VLAN （ Virtual Local Area Network ，虚拟局域网）是将一个 LAN 局域网进行划分，形成多个逻辑上独立的虚拟局域网。
            交换机
                二层交换机
                    二层交换机主要用于二层网络（链路层）的互通
                三层交换机
                    三层交换机可以认为是带有路由功能的二层交换机，即用于三层网络（网络层）的互通。
    存储
        Ceph
    监控
        Prometheus
        Grafana
        ELK
            Elasticsearch
            Logstash
            Kibana

环境
    前置条件
        Ubuntu 20.04.6 LTS
            192.168.233.129   hadoop01
            192.168.233.130   hadoop02
            192.168.233.131   hadoop03
        规划资源
            Master   hadoop01   192.168.233.129
            Node     hadoop02   192.168.233.130
            Node     hadoop03   192.168.233.131
        用户权限
            sudo su
        关闭 Swap （ hadoop01/hadoop02/hadoop03 ， Swap 会影响容器性能）
            swapoff -a
            sed -ri 's/.*swap.*/#&/' /etc/fstab
                -r ：启用正则表达式。
                -i ：原地编辑。
                's/.*swap.*/#&/' ：替换命令，在包含 swap 的行前加 # ，即注释掉该行。
                /etc/fstab ：要编辑的文件路径。
        桥接网络（ hadoop01/hadoop02/hadoop03 ，确保容器网络进出都经过 ip6tables/iptables ，以应用网络安全规则）
            cat > /etc/sysctl.d/k8s.conf << EOF
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            EOF

            sysctl --system

    安装 Docker （ hadoop01/hadoop02/hadoop03 ， 20.10.16 ）
        apt update
        apt install -y apt-transport-https ca-certificates curl software-properties-common
            安装依赖
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            添加 Docker GPG 密钥到受信任列表。查看 GPG 密钥列表：
                apt-key list
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            添加 Docker 软件源到系统 APT 源列表。查看 APT 源列表：
                cat /etc/apt/sources.list

        apt update
        apt install -y docker-ce=5:20.10.16~3-0~ubuntu-focal
            验证
                docker -v
        systemctl enable docker
            添加开机自启

        cat > /etc/docker/daemon.json << EOF
        {
          "exec-opts": ["native.cgroupdriver=systemd"]
        }
        EOF
            告诉 Docker 使用 systemd 作为其 cgroup 驱动程序，这样做的目的通常是为了与宿主系统的 cgroup 配置保持一致，以便更好地管理容器的资源。

        systemctl daemon-reload
            重新加载 systemd 守护程序的配置文件
        systemctl restart docker

    安装 K8s 核心组件（ hadoop01/hadoop02/hadoop03 ）
        curl http://mirrors.huaweicloud.com/kubernetes/yum/doc/apt-key.gpg | apt-key add -
            添加 K8s GPG 密钥到受信任列表

        cat > /etc/apt/sources.list.d/kubernetes.list << EOF
        deb http://mirrors.huaweicloud.com/kubernetes/apt/ kubernetes-xenial main
        EOF
            添加 k8s 镜像源

        apt update
        apt install -y kubelet=1.23.9-00 kubeadm=1.23.9-00 kubectl=1.23.9-00
        systemctl enable kubelet

        kubeadm init \
        --apiserver-advertise-address=<master_ip> \
        --image-repository registry.aliyuncs.com/google_containers \
        --pod-network-cidr=10.244.0.0/16 \
        --ignore-preflight-errors='all'
            初始化 K8s Master ，注意仅在 hadoop01 上执行。

    安装 K8s 网络组件 Flannel （ hadoop01/hadoop02/hadoop03 ，为集群提供虚拟网络，让各节点上的 Pod 之间可以互相通信）
        kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

    加入集群
        kubeadm join <master_ip:master_port> --token <token> \
                --discovery-token-ca-cert-hash sha256:<sha256>