概述
    Harbor 复用了 Docker Registry 存储镜像的能力，另外提供了权限控制、活动审计、镜像分发等功能。
核心组件
    Proxy
        Proxy 作为前置的反向代理，统一接收 Browser 、 Docker Client 等的请求，并将请求转发给后端不同的服务。
        Proxy 是基于 Nginx 实现的
    Core Service
        UI ：提供用户界面对镜像进行管理。
        API ：提供 RESTFul API 服务对镜像进行管理。
        Auth ：提供权限控制能力。
    Docker Registry
        Docker Registry 负责镜像存储
    Job Service
        Job Service 负责镜像远程复制功能，可以把本地镜像同步到其它 Harbor 实例。
    ...
环境
    独立安装（ https://xie.infoq.cn/article/faa9ee456452891828cc080b8 ）
        前置条件
            Ubuntu 20.04.6 LTS
                192.168.233.129
                    Docker version 26.1.3, build b72abbb
                    docker-compose version 1.25.0
        准备文件
            sudo mkdir -p /opt/module/harbor
            sudo chown -R sxydh:sxydh /opt/module/harbor
            wget -P /opt/module/harbor https://github.com/goharbor/harbor/releases/download/v2.4.2/harbor-offline-installer-v2.4.2.tgz
            tar -zxvf /opt/module/harbor/harbor-offline-installer-v2.4.2.tgz -C /opt/module/harbor
            cp /opt/module/harbor/harbor/harbor.yml.tmpl /opt/module/harbor/harbor/harbor.yml
        修改配置
            vim /etc/docker/daemon.json
                追加或更新
                    {
                        "registry-mirrors": [
                            "https://mirror.ccs.tencentyun.com"
                        ],
                        "insecure-registries": [
                            "192.168.233.129:20006"
                        ]
                    }
            vim /opt/module/harbor/harbor/harbor.yml
                追加或更新
                    hostname: 192.168.233.129
                    http:
                      # port for http, default is 80. If https enabled, this port will redirect to https port
                      port: 20006
                    # https:
                    #   # https port for harbor, default is 443
                    #   port: 443
                    #   # The path of cert and key files for nginx
                    #   certificate: /your/certificate/path
                    #   private_key: /your/private/key/path
        安装服务
            systemctl restart docker
                docker 配置文件有更新，需要重启。
            cd /opt/module/harbor/harbor
            sudo ./prepare
                预处理
            sudo ./install.sh
                安装
        启动服务
            cd /opt/module/harbor/harbor
            sudo docker-compose up
                验证
                    http://192.168.233.129:20006
    容器安装（ https://www.cnblogs.com/cerberus43/p/15881258.html ）
        前置条件
            K8s v1.23.9
                Master
                    hadoop01 192.168.233.129
                Node
                    hadoop02 192.168.233.130
                    hadoop03 192.168.233.131
            Helm v3.15.3
                hadoop01 192.168.233.129
            sudo su
        安装服务（ hadoop01 ）
            mkdir -p /opt/module/harbor
            cd /opt/module/harbor
            helm repo add goharbor https://helm.goharbor.io
                添加仓库
                goharbor ：本地仓库名称。
                https://helm.goharbor.io ：远程仓库地址。
            helm pull goharbor/harbor
                拉取 Chart
                goharbor ：本地仓库名称。
                harbor ：拉取 Chart 名称。
            tar -zxvf harbor-1.15.0.tgz
            cd harbor
            vim values.yaml
                更新
                    expose:
                      type: nodePort
                      tls:
                        enabled: false
                    # 必须改为 HTTP 协议，否则网页客户端提示密码错误。
                    # 必须改为要访问的节点 IP 和端口，否则 docker login 提示 503 错误。
                    externalURL: http://192.168.233.129:30002
                    persistence:
                      enabled: false
            kubectl create namespace harbor
            helm install harbor-instance goharbor/harbor -f values.yaml -n harbor
                安装 Harbor Chart
                harbor-instance ：安装实例名称。
                goharbor ：本地仓库名称。
                harbor ：安装 Harbor Chart 名称。

                验证：
                    kubectl get pod -o wide -n harbor
                    kubectl get deployment -o wide -n harbor
                    
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-core | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-database | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-jobservice | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-nginx | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-portal | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-redis | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-registry | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-trivy | awk 'NR==1 {print $1}') && kubectl describe pod $POD_NAME -n harbor
                    
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-core | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-database | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-jobservice | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-nginx | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-portal | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-redis | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-registry | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n harbor
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-trivy | awk 'NR==1 {print $1}') && kubectl logs $POD_NAME -n harbor
                    
                    
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-core | awk 'NR==1 {print $1}') && kubectl exec -it $POD_NAME -n harbor -- bash
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-database | awk 'NR==1 {print $1}') && kubectl exec -it $POD_NAME -n harbor -- bash
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-jobservice | awk 'NR==1 {print $1}') && kubectl exec -it $POD_NAME -n harbor -- bash
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-nginx | awk 'NR==1 {print $1}') && kubectl exec -it $POD_NAME -n harbor -- bash
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-portal | awk 'NR==1 {print $1}') && kubectl exec -it $POD_NAME -n harbor -- bash
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-redis | awk 'NR==1 {print $1}') && kubectl exec -it $POD_NAME -n harbor -- bash
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-registry | awk 'NR==1 {print $1}') && kubectl exec -it $POD_NAME -n harbor -- bash
                    POD_NAME=$(kubectl get pod -n harbor | grep harbor-instance-trivy | awk 'NR==1 {print $1}') && kubectl exec -it $POD_NAME -n harbor -- bash
                    
                    kubectl get service -o wide -n harbor
                        http://192.168.233.129:30002
                            admin
                            Harbor12345
                                新建项目
                                推送镜像
                                
                删除：
                    helm uninstall harbor-instance -n harbor