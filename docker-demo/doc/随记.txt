镜像
    概述
        Linux 操作系统分为内核和用户空间，内核启动后，会挂载 root 文件系统为其提供用户空间支持。
        镜像（ Image ）就相当于是一个 root 文件系统，比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。
    获取
        docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
            docker pull ubuntu:18.04
    删除
        docker image rm [选项] <镜像1> [<镜像2> ...]
            docker image rm ubuntu:18.04
    列表
        docker image ls
            系统资源的磁盘使用情况
                docker system df
容器
    概述
        镜像（ Image ）和容器（ Container ）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。
    启动
        docker run -it --rm ubuntu:18.04 bash
            -i ：保持标准输入（ stdin ）打开，允许用户输入数据到容器。
            -t ：分配一个伪终端（ pseudo-TTY ），这样可以与容器的终端交互。
            --rm ：容器退出后随之将其删除。
            bash ：启动后容器内执行 bash 命令。

            挂载文件
                docker run -v <host_path>:<container_path> -it <image_name>
            守护启动
                docker run -d <image_name>
            进入容器
                docker exec -it <container_id/container_name> bash
                    更改镜像源
                        echo  "deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free" > /etc/apt/sources.list
                        echo  "deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free" >> /etc/apt/sources.list
                        echo  "deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free" >> /etc/apt/sources.list
                        echo  "deb http://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free" >> /etc/apt/sources.list
            重新启动
                docker restart <container_id/container_name>
    停止
        docker stop <container_id/container_name>

        停止所有
            docker stop $(docker ps -q)
    列表
        docker container ls -a
        docker ps -a
    删除
        docker rm <container_id/container_name>

        删除所有
            docker container prune
    网络
        概述
            使得容器之间可以相互通信
            使得容器之间可以用容器名进行通信
        端口映射
            docker run -p <ip>:<host_port>:<container_port> -d <image_name>
        容器互联
            网络列表
                docker network ls
            查看网络
                docker network inspect <net_name>
            新建网络
                docker network create -d bridge <net_name>
                    -d ：指定网络类型。
            删除网络
                docker network rm <net_name>
            加入网络
                docker run --network <net_name> -d <image_name>
仓库
    概述
        镜像构建完成后，可以很容易的在当前宿主机上运行。但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中存储、分发镜像的服务， Docker Registry 、 Harbor 就是这样的服务。
        一个 Docker Registry 中可以包含多个仓库（ Repository ），每个仓库可以包含多个标签（ Tag ），每个标签对应一个镜像（ Image ）。
Docker Compose
    概述
        Docker Compose 是用于定义和运行多个 Docker 的工具
        Docker Compose 使用 YAML 文件（通常命名为 docker-compose.yml ）来配置多个容器服务，这些服务可以是 Web 服务器、数据库、缓存等。
环境（https://yeasy.gitbook.io/docker_practice/）
    前置条件
        Ubuntu 20.04.6 LTS（192.168.233.129）
    安装 Docker
        sudo apt-get update
        sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
        curl -fsSL https://mirrors.tencent.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            从 Docker 镜像源获取 Docker 的 GPG 公钥
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.tencent.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            向 sources.list 中添加 Docker 软件源
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io
            验证
                systemctl status docker
        sudo usermod -aG docker sxydh
            将当前用户添加到 docker 用户组，注意需要重新登录。
            配置镜像源
                sudo vi /etc/docker/daemon.json
                    追加或更新
                        {
                            "registry-mirrors": [
                                "https://mirror.ccs.tencentyun.com"
                            ]
                        }
                sudo systemctl daemon-reload
                sudo systemctl restart docker
            验证
                docker run --rm hello-world
    安装 Docker Compose
        sudo apt-get install docker-compose